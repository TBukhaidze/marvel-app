{"version":3,"file":"static/js/345.9979e8e3.chunk.js","mappings":"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","sources":["components/errorMesssage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect, useState } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMesssage/ErrorMessage\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getCharacter(id).then(onCharLoaded); //to chto prishlo v then zapisivaetsia v fn charloaded\\\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = (char) => {\n  const {\n    char: { name, description, thumbnail, homepage, wiki },\n  } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMesssage/ErrorMessage\";\nimport \"./charList.scss\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charlist) => [...charList, ...newCharList]);\n\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  // Этот метод создан для оптимизации,\n  // чтобы не помещать такую конструкцию в метод render\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={item.id}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    // А эта конструкция вынесена для центровки спиннера/ошибки\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./charInfo.scss\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMesssage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics for this character\"}\n        {comics.slice(0, 10).map((item, i) => {\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMesssage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMesssage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n//etot komp. eto predoxranitel oshibki obernuv v ego prilojenia\r\n//prodoljit rab. i dlia polzovatelia stranica vsioravno budet rabochaiaa\r\n//\r\n// predoxraniteli loviat oshibki tolko\r\n// 1 v metode render\r\n// 2 v metodax jiznenogo cikla i\r\n// 3 v konstruktorax dochernix komponentov\r\n\r\n// predoxraniteli ne loviat oshibki kotorie\r\n// proizoshli v nutri obrabotchika sobiitii (napr onClick)\r\n// v asinxronnom kode setevie zaprosi (predoxranitel ne znaet kogda kod proizoidiot)\r\n// ne mojet poimat oshibku v samom predoxraniteli (vnutri sebia)\r\n// servernii rendering\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const respone = await fetch(url, { method, body, headers });\r\n\r\n        if (!respone.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${respone.status}`);\r\n        }\r\n\r\n        const data = await respone.json();\r\n\r\n        setLoading(false);\r\n\r\n        return data;\r\n      } catch (error) {\r\n        setLoading(false);\r\n        setError(error.message);\r\n\r\n        throw error;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return { loading, error, request, clearError };\r\n};\r\n","// aq ar vwert arc imports arc extends radganac amas\r\n// araferi chird. reactisgan da daiwereba native Js enaze\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=8243f614e11c544c35d603e3433fc12e\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: `https://www.marvel.com/characters/${char.name}`,\r\n      wiki: `https://en.wikipedia.org/wiki/${char.name}_(Marvel_Comics)`,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      // optional chaining operator\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","charlist","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","_Fragment","_ref","comics","slice","charId","skeleton","CharSearchForm","getCharacterByName","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","respone","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","path","extension","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}